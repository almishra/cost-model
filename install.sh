# Check make
CUR_CMAKE=`cmake --version | head -n1 | awk '{print $3}'`
REQ_CMAKE=3.13.4
if [ "$(printf '%s\n' "$CUR_CMAKE" "$REQ_CMAKE" | sort -V | head -n1)" = "$REQ_CMAKE" ]; 
then
  echo "cmake version $CUR_CMAKE found"
else
  echo "Minimum cmake version $REQ_CMAKE is required"
  exit
fi

# Check CUDA
if ! type nvcc > /dev/null 2>&1
then 
  echo "CUDA not installed"
  exit
fi
CUR_CUDA=`nvcc --version | grep release | awk -F', ' '{print $3}' | sed 's/^.//'`
echo "cuda version $CUR_CUDA found"

# Build DeviceCapability
make -f makeDeviceCapability.mk
ARCH=`./deviceArch`
CAPABILITY=`./deviceCapability`

echo "ARCH=$ARCH"
echo "CAPABILITY=$CAPABILITY"

# GCC version
CUR_GCC=`gcc -dumpversion`
REQ_GCC="6.0.0"
if [ "$(printf '%s\n' "$REQ_GCC" "$CUR_GCC" | sort -V | head -n1)" = "$REQ_GCC" ]; then
  echo "GCC version ${CUR_GCC} found"
else
  echo "Need gcc version greater than ${REQ_GCC}"
  exit 1
fi
GCC_TOOLCHAIN=`which gcc | sed 's/\/bin\/gcc$//'`

# Clone Project
#git clone --depth 1 https://github.com/llvm/llvm-project.git 

FRAMEWORK_PATH=$PWD
LLVM_SRC=$FRAMEWORK_PATH/llvm-project
CLANG_BUILD=$FRAMEWORK_PATH/clang-build
OPENMP_BUILD=$FRAMEWORK_PATH/openmp-build
BIN=$FRAMEWORK_PATH/llvm-bin

if [ ! -d $CLANG_BUILD ]
then
  mkdir $CLANG_BUILD 
fi
if [ ! -d $OPENMP_BUILD ]
then
  mkdir $OPENMP_BUILD
fi

cd $CLANG_BUILD
echo "cmake -DCMAKE_INSTALL_PREFIX=$BIN -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_COMPILER=`which gcc` -DCMAKE_CXX_COMPILER=`which g++` -DLLVM_ENABLE_PROJECTS="clang;openmp" -DCMAKE_CXX_LINK_FLAGS=\"-L$GCC_TOOLCHAIN -Wl,-rpath,$GCC_TOOLCHAIN\" -DLLVM_TARGETS_TO_BUILD=\"host;NVPTX\" -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=$ARCH -DLLVM_ENABLE_ASSERTIONS=ON $LLVM_SRC/llvm"
cmake -DCMAKE_INSTALL_PREFIX=$BIN -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_COMPILER=`which gcc` -DCMAKE_CXX_COMPILER=`which g++` -DLLVM_ENABLE_PROJECTS="clang;openmp" -DCMAKE_CXX_LINK_FLAGS="-L$GCC_TOOLCHAIN -Wl,-rpath,$GCC_TOOLCHAIN" -DLLVM_TARGETS_TO_BUILD="host;NVPTX" -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=$ARCH -DLLVM_ENABLE_ASSERTIONS=ON $LLVM_SRC/llvm
make -j28 install

cd $OPENMP_BUILD
#echo "cmake -DCMAKE_INSTALL_PREFIX=$BIN -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_COMPILER=$BIN/bin/clang -DCMAKE_CXX_COMPILER=$BIN/bin/clang++ -DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN=$GCC_TOOLCHAIN -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=$CAPABILITY $LLVM_SRC/openmp"
#echo "cmake -DCMAKE_INSTALL_PREFIX=$BIN -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_COMPILER=$BIN/bin/clang -DCMAKE_CXX_COMPILER=$BIN/bin/clang++ -DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN=$GCC_TOOLCHAIN -DLLVM_ENABLE_PROJECTS="openmp" -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=$CAPABILITY $LLVM_SRC/llvm"
#cmake -DCMAKE_INSTALL_PREFIX=$BIN -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_COMPILER=$BIN/bin/clang -DCMAKE_CXX_COMPILER=$BIN/bin/clang++ -DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN=$GCC_TOOLCHAIN -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=$CAPABILITY $LLVM_SRC/openmp
echo "cmake -DCMAKE_INSTALL_PREFIX=$BIN -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_COMPILER=$BIN/bin/clang -DCMAKE_CXX_COMPILER=$BIN/bin/clang++ -DLLVM_ENABLE_PROJECTS="openmp" -DCMAKE_CXX_LINK_FLAGS=\"-L$GCC_TOOLCHAIN -Wl,-rpath,$GCC_TOOLCHAIN\" -DLLVM_TARGETS_TO_BUILD=\"host;NVPTX\" -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=$ARCH  -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=$CAPABILITY -DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN=$GCC_TOOLCHAIN $LLVM_SRC/llvm"
cmake -DCMAKE_INSTALL_PREFIX=$BIN -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_COMPILER=$BIN/bin/clang -DCMAKE_CXX_COMPILER=$BIN/bin/clang++ -DLLVM_ENABLE_PROJECTS="openmp" -DCMAKE_CXX_LINK_FLAGS="-L$GCC_TOOLCHAIN -Wl,-rpath,$GCC_TOOLCHAIN" -DLLVM_TARGETS_TO_BUILD="host;NVPTX" -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=$ARCH  -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=$CAPABILITY -DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN=$GCC_TOOLCHAIN $LLVM_SRC/llvm
make -j28 install
